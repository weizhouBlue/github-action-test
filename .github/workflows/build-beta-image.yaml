# build the Beta image with customized tag ,under an clean env , from  specified Branch
# buid image like: ghcr.io/weizhoublue/github-action-test/controllerimage-{beta}:{yourTag}
name: Build Image Beta

env:
  ONLINE_REGISTER: ghcr.io
  BUILD_PLATFORM: linux/amd64,linux/arm64
  ONLINE_REGISTER_USER: ${{ github.actor }}
  ONLINE_REGISTER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'sha, ref'
        required: true
        default: v1.0.0
      suffix:
        description: 'image name Suffix (e.g. "beta" )'
        required: true
        default: "beta"

permissions: write-all

jobs:
  build-and-push:
    environment: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: controllerimage
            dockerfile: ./images/controllerimage/Dockerfile
            # root path of this project
            context: ./

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Login to online register
        uses: docker/login-action@v1.14.0
        with:
          username: ${{ env.ONLINE_REGISTER_USER }}
          password: ${{ env.ONLINE_REGISTER_PASSWORD }}
          registry: ${{ env.ONLINE_REGISTER }}

      - name: Checking Ref Exists
        id: version
        shell: bash
        run: |
          echo ::set-output name=version::${{ github.event.inputs.ref }}
          if docker buildx imagetools inspect ${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-${{ github.event.inputs.suffix }}:${{ github.event.inputs.ref }} &>/dev/null; then
            echo ::set-output name=exists::"true"
            echo "the target beta image exist , no need to build it "
          else
            echo ::set-output name=exists::"false"
            echo "the target beta image do not exist, build it "
          fi

      - name: Checkout Source Code
        if: ${{ steps.version.outputs.exists == 'false' }}
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          # The branch, tag or SHA to checkout. When checking out the repository that
          # triggered a workflow, this defaults to the reference or SHA for that event.
          # Otherwise, uses the default branch.
          ref: ${{ steps.version.output.version }}

      - name: Release Build ${{ matrix.name }}
        if: ${{ steps.version.outputs.exists == 'false' }}
        uses: docker/build-push-action@v2
        continue-on-error: false
        id: docker_build_release
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: ${{ env.BUILD_PLATFORM }}
          tags: |
            ${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-${{ github.event.inputs.suffix }}:${{ github.event.inputs.ref }}

      - name: Image Release Digest
        if: ${{ steps.version.outputs.exists == 'false' }}
        shell: bash
        run: |
          mkdir -p image-digest/
          echo "## ${{ matrix.name }}" > image-digest/${{ matrix.name }}.txt
          echo "" >> image-digest/${{ matrix.name }}.txt
          echo "\`${{ env.ONLINE_REGISTER }}/${{ github.repository }}/${{ matrix.name }}-${{ github.event.inputs.suffix }}:${{ github.event.inputs.ref }}@${{ steps.docker_build_release.outputs.digest }}\`" >> image-digest/${{ matrix.name }}.txt
          echo "" >> image-digest/${{ matrix.name }}.txt

      # Upload artifact digests
      - name: Upload artifact digests
        if: ${{ steps.version.outputs.exists == 'false' }}
        uses: actions/upload-artifact@v3.0.0
        with:
          name: image-digest ${{ matrix.name }}
          path: image-digest
          retention-days: 1

  image-digests:
    name: Display Digests
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Downloading Image Digests
        shell: bash
        run: |
          mkdir -p image-digest/

      - name: Download digests of all images built
        uses: actions/download-artifact@v3.0.0
        with:
          path: image-digest/

      - name: Image Digests Output
        shell: bash
        run: |
          cd image-digest/
          find -type f | sort | xargs -d '\n' cat
