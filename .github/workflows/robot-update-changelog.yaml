# auto generating changelog to /changelogs/***
# when tag or dispatch by manual , auto generate changelog by the related-label history PR between tags,
# then commit the pr to main branch , then auto approve it
# commit changelog: changelogs/CHANGELOG-{begin_tag}-to-{end_tag}.md
name: Robot update Changelog For release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+
  workflow_dispatch:
    inputs:
      from_tag:
        description: 'from which tag'
        required: false
      to_tag:
        description: 'to which tag'
        required: false

env:
  CHANGELOG_DIR: changelogs
  MERGE_TO_BRANCH: main
  PR_LABEL: release/robot_changelog
  PR_REVIWER: weizhoublue
  CHANGELOG_CONF: .github/changelog_builder_conf.json
  CHANGELOG_RESULT_DIR: changelogs
  CHANGELOG_TEMP_FILE: _temp_changelog


jobs:
  changelog:
    name: auto generate release changelog
    runs-on: ubuntu-latest
    steps:
      # checkout code for tag and pr
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Only a single commit is fetched by default, for the ref/SHA that triggered the workflow
          # if Set fetch-depth: 0 to fetch all history for all branches and tags
          fetch-depth: 0

      #      - name: Get Current Tag Auto
      #        if: ${{ github.event_name != 'workflow_dispatch' }}
      #        id: get_current_tag
      #        run: |
      #          tag=$(git describe --tags --abbrev=0)
      #          echo "Version to revert: ${tag}"
      #          echo "::set-output name=tag::${tag}"

      #      - name: Get Previous Tag Auto
      #        if: ${{ github.event_name != 'workflow_dispatch' }}
      #        id: get_previous_tag
      #        run: |
      #          tag=$(git describe --tags --abbrev=0 $(git describe --tags --abbrev=0)^)
      #          echo "Previous tag: ${tag}"
      #          echo "::set-output name=tag::${tag}"

      - name: Check Tag
        id: check_tag
        continue-on-error: false
        run: |
          if ${{ github.event_name != 'workflow_dispatch' }} ; then
              echo "auto tag for tag event"
              echo ::set-output name=auto_tag::true
              exit 0
          fi
          if [ -z "${{ github.event.inputs.to_tag }}" ] && [ -z "${{ github.event.inputs.from_tag }}" ] ; then
              echo "auto tag for dispatch event"
              echo ::set-output name=auto_tag::true
              exit 0
          fi
          if [ -n "${{ github.event.inputs.to_tag }}" ] && [ -n "${{ github.event.inputs.from_tag }}" ] ; then
              echo "begin to validate tags"
          else
              echo "from_tag and to_tag should be fill , or empty at same time"
              exit 1
          fi
          if ! git describe --tags --abbrev=0  ${{ github.event.inputs.from_tag }} &>/dev/null ; then
              echo "error, does not exist from_tag ${{ github.event.inputs.from_tag }} "
              exit 1
          else
              echo "exist from_tag ${{ github.event.inputs.from_tag }} "
          fi
          if ! git describe --tags --abbrev=0  ${{ github.event.inputs.to_tag }} &>/dev/null ; then
              echo "error, does not exist to_tag ${{ github.event.inputs.to_tag }} "
              exit 2
          else
              echo "exist to_tag ${{ github.event.inputs.to_tag }} "
          fi
          echo ::set-output name=auto_tag::false

      # https://github.com/mikepenz/release-changelog-builder-action
      # PRs will only show up in the changelog if assigned one of the default label categories "feature", "fix" or "test" . Or else, we should configure yaml
      #
      # auto parse the latest tag and previous one
      - name: Build Changelog By Auto Tag
        id: create_changelog_by_auto_tag
        if: ${{ steps.check_tag.outputs.auto_tag == 'true' }}
        uses: mikepenz/release-changelog-builder-action@v2.9.0
        with:
          configuration: ${{ env.CHANGELOG_CONF }}
          outputFile: ${{ env.CHANGELOG_RESULT_DIR }}/${{ env.CHANGELOG_TEMP_FILE }}
          failOnError: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # specify the tag
      - name: Build Changelog By Manual Tag
        id: create_changelog_by_manul_tag
        if: ${{ steps.check_tag.outputs.auto_tag == 'false' }}
        uses: mikepenz/release-changelog-builder-action@v2.9.0
        with:
          configuration: ${{ env.CHANGELOG_CONF }}
          outputFile: ${{ env.CHANGELOG_RESULT_DIR }}/${{ env.CHANGELOG_TEMP_FILE }}
          fromTag: ${{ github.event.inputs.from_tag }}
          toTag: ${{ github.event.inputs.end_tag }}
          failOnError: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Changelog File
        id: generate_changelog_file
        continue-on-error: false
        if: steps.create_changelog_by_auto_tag.outputs.failed == 'false' ||  steps.create_changelog_by_manul_tag.outputs.failed == 'false'
        run: |
          TEMP_FILE=${{ env.CHANGELOG_RESULT_DIR }}/${{ env.CHANGELOG_TEMP_FILE }}
          if [ ! -f "$TEMP_FILE" ] ; then
               echo "failed to find auto-generated changelog result file $TEMP_FILE"
               exit 1
          fi
          if ${{ steps.create_changelog_by_auto_tag.outputs.failed == 'false' }} ; then
              CHANGELOG_FILE_NAME=CHANGELOG-${{ steps.create_changelog_by_auto_tag.outputs.fromTag }}-to-${{ steps.create_changelog_by_auto_tag.outputs.toTag }}.md
              echo ::set-output name=from_tag::${{ steps.create_changelog_by_auto_tag.outputs.fromTag }}
              echo ::set-output name=to_tag::${{ steps.create_changelog_by_auto_tag.outputs.toTag }}
          else
              CHANGELOG_FILE_NAME=CHANGELOG-${{ steps.create_changelog_by_manul_tag.outputs.fromTag }}-to-${{ steps.create_changelog_by_manul_tag.outputs.toTag }}.md          
              echo ::set-output name=from_tag::${{ steps.create_changelog_by_manul_tag.outputs.fromTag }}
              echo ::set-output name=to_tag::${{ steps.create_changelog_by_manul_tag.outputs.toTag }}
          fi
          [ ! -d "${{ env.CHANGELOG_DIR }}" ] && mkdir -p ${{ env.CHANGELOG_DIR }}
          DEST_FILE=${{ env.CHANGELOG_DIR }}/${CHANGELOG_FILE_NAME}
          echo > ${DEST_FILE}
          if ${{ steps.create_changelog_by_auto_tag.outputs.failed == 'false' }} ; then
#              echo "::commit list::" >> ${DEST_FILE}
#              echo "" >> ${DEST_FILE}
#              echo '${{ steps.create_changelog_by_auto_tag.outputs.pull_requests }}' >> ${DEST_FILE}
#              echo "" >> ${DEST_FILE}
#              echo "::changelog::" >> ${DEST_FILE}
#              echo "" >> ${DEST_FILE}
#              echo '${{ steps.create_changelog_by_auto_tag.outputs.changelog }}' >> ${DEST_FILE}
               mv ${TEMP_FILE} ${DEST_FILE}
          else
#              echo "::commit list::" >> ${DEST_FILE}
#              echo "" >> ${DEST_FILE}
#              echo '${{ steps.create_changelog_by_manul_tag.outputs.pull_requests }}' >> ${DEST_FILE}
#              echo "" >> ${DEST_FILE}
#              echo "::changelog::" >> ${DEST_FILE}
#              echo "" >> ${DEST_FILE}
#              echo '${{ steps.create_changelog_by_manul_tag.outputs.changelog }}' >> ${DEST_FILE}
              mv ${TEMP_FILE} ${DEST_FILE} 
          fi

      # https://github.com/peter-evans/create-pull-request
      #  all new and modified files will be committed
      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v3.14.0
        with:
          title: "robot Update Changelog from tag ${{ steps.generate_changelog_file.outputs.from_tag }} to tag ${{ steps.generate_changelog_file.outputs.to_tag }}"
          # from branch
          commit-message: "robot update Changelog from tag ${{ steps.generate_changelog_file.outputs.from_tag }} to tag ${{ steps.generate_changelog_file.outputs.to_tag }}"
          # branch name: ${branch}-${branch-suffix}
          # an branch suffix could make sure the branch is unique
          branch-suffix: timestamp
          branch: update_changelog
          # Delete the branch when closing pull requests, and when undeleted after merging
          delete-branch: true
          # merge to
          base: ${{ env.MERGE_TO_BRANCH }}
          signoff: true
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ env.PR_LABEL }}
          reviewers: ${{ env.PR_REVIWER }}

      - name: Check PR Outputs
        if: ${{ steps.create_pr.outputs.pull-request-number }}
        run: |
          echo "Pull Request Number - ${{ steps.create_pr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.create_pr.outputs.pull-request-url }}"

      # auto apporve the pr if requirements have been satisfied
      # https://github.com/peter-evans/enable-pull-request-automerge
      - name: PR Auto Approve
        uses: peter-evans/enable-pull-request-automerge@v1.2.0
        with:
          token: ${{ secrets.PAT }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: merge