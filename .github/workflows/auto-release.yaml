# build the release image under an clean env , and it is trigger by tag event
# buid image like: ghcr.io/weizhoublue/github-action-test/controllerimage:v1.0.0
# 1 build the all images, push images to ghcr.io,
# 2 package the chart package, PR to '/charts' of branch 'github_pages' for githubPage , who used as chart registry and doc server( PR need approval by hand)
# 3 create changelog file, PR to '/changelogs' of branch 'github_pages' for githubPage ( PR need approval by hand)
# 4 create a release , attached with chart and changelog

name: Auto Release Version

env:
  ONLINE_REGISTER: ghcr.io
  BUILD_PLATFORM: linux/amd64,linux/arm64
  ONLINE_REGISTER_USER: ${{ github.actor }}
  ONLINE_REGISTER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  CHART_DEST_BRANCH: webserver
  CHANGELOG_DIR: changelogs
  MERGE_TO_BRANCH: main
  PR_LABEL: pr/release/robot_changelog
  PR_REVIWER: weizhoublue
  CHANGELOG_CONF: .github/changelog_builder_conf.json
  CHANGELOG_RESULT_DIR: changelogs
  CHANGELOG_TEMP_FILE: _temp_changelog
  HELM_VERSION: v3.8.1

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag'
        required: true
        default: v1.0.0

permissions: write-all

jobs:
  get-tag:
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.get_ref.outputs.tag }}
    steps:
      - name: Get Ref
        id: get_ref
        run: |
          if ${{ github.event_name == 'workflow_dispatch' }} ; then
            echo "call by self workflow_dispatch"
            echo ::set-output name=tag::${{ github.event.inputs.tag }}
          elif ${{ github.event_name == 'workflow_dispatch' }} ; then
            echo "call by push tag"
            echo ::set-output name=tag::${GITHUB_REF##*/}
          else
            echo "unexpected event: ${{ github.event_name }}"
            exit 1
          fi

  build-release-image:
    needs: get-tag
    # forbid to specify version for local workflow, GITHUB_REF Same as the caller workflow
    uses: ./.github/workflows/call-release-image.yaml
    with:
      ref: ${{ needs.get-tag.outputs.tag }}

  release-chart:
    needs: [build-release-image, get-tag]
    # forbid to specify version for local workflow, GITHUB_REF Same as the caller workflow
    uses: ./.github/workflows/call-release-chart.yaml
    with:
      ref: ${{ needs.get-tag.outputs.tag }}

  release-changelog:
    needs: [build-release-image, get-tag]
    # forbid to specify version for local workflow, GITHUB_REF Same as the caller workflow
    uses: ./.github/workflows/call-release-changelog.yaml
    with:
      dest_tag: ${{ needs.get-tag.outputs.tag }}

  create-release:
    needs: [release-chart, release-changelog, get-tag]
    name: create release
    runs-on: ubuntu-latest
    steps:
      - name: Download Chart Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ needs.release-chart.outputs.artifact }}
          path: chart-package/

      - name: Download Changelog Artifact
        uses: actions/download-artifact@v3.0.0
        with:
          name: ${{ needs.release-changelog.outputs.artifact }}
          path: changelog-result/

      - name: Get Downloaded Files
        id: download_file
        run: |
          # ========= chart
          if ! ls chart-package/*.tgz &>/dev/null ; then
              echo "error, failed to find any chart "
              exit 1
          fi
          chart_path=$( ls chart-package/*.tgz )
          echo ::set-output name=chart_path::${chart_path}
          # ========== changelog
          if ! ls changelog-result/*.md &>/dev/null ; then
              echo "error, failed to find changelog "
              exit 2
          fi
          ls changelog-result/
          cat changelog-result/*.md
          changelog_file=$( ls changelog-result/ )
          changelog_path=./changelog-result/${changelog_file}
          echo ::set-output name=changelog_path::${changelog_path}
          cp ./changelog-result/${changelog_file} ./changelog-result/changelog.md

      - name: Create Release
        id: create_release
        continue-on-error: false
        uses: ncipollo/release-action@v1.9.0
        with:
          # "release.tar.gz,foo/*.txt,..."
          artifacts: "chart-package/*"
          # update the release event it exists
          allowUpdates: true
          # if existing release artifacts should be removed
          removeArtifacts: true
          # if existing release artifacts should be replaced
          replacesArtifacts: true
          artifactErrorsFailBuild: true
          bodyFile: "./changelog-result/changelog.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.get-tag.outputs.tag }}
          name: "Release ${{ needs.get-tag.outputs.tag }}"
