name: Lint Go Vendor And golangci-lint

# Any change in triggers needs to be reflected in the concurrency group.
on:
  pull_request: {}
  push:
    branches:
      - main
      - release-*

permissions: read-all

# for each pr, queue all workflows
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.after }}
  cancel-in-progress: true

jobs:
  # filter changes base filt path , so step analyze can do less thing
  filter_changes:
    name: Deduce required tests from code changes
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    outputs:
      go-changes: ${{ steps.go-changes.outputs.src }}
    steps:
      - name: Checkout code
        if: ${{ !github.event.pull_request }}
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Check code changes
        uses: dorny/paths-filter@v2.10.2
        id: go-changes
        with:
          base: ${{ github.event.pull_request.base.sha }}
          ref: ${{ github.event.pull_request.head.sha }}
          filters: |
            src:
              - .github/workflows/lint-golang.yaml
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'

  go-mod:
    # run if filters.src was changed
    needs: filter_changes
    if: ${{ needs.filter_changes.outputs.go-changes == 'true' || github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.0

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Check module vendoring
        run: |
          go mod tidy
          go mod vendor
          test -z "$(git status --porcelain)" || (echo "please run 'go mod tidy && go mod vendor', and submit your changes"; exit 1)

  golangci:
    # run if filters.src was changed
    needs: filter_changes
    if: ${{ needs.filter_changes.outputs.go-changes == 'true' || github.event_name != 'pull_request' }}
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.0

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Run golangci-lint
        id: golangci-lint
        continue-on-error: true
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      - name: gokart
        id: gokart
        continue-on-error: true
        run: |
          go install github.com/praetorian-inc/gokart@latest
          gokart scan --globalsTainted

      - name: Check Other
        id: other
        continue-on-error: true
        run: |
          make lint-golang

      - name: Result
        continue-on-error: false
        run: |
          result=${{ steps.golangci-lint.outcome }}
          [ "${result}"x == "failure"x ] && exit 1
          result=${{ steps.gokart.outcome }}
          [ "${result}"x == "failure"x ] && exit 2
          result=${{ steps.other.outcome }}
          [ "${result}"x == "failure"x ] && exit 3
          echo "all succeed"
          exit 0
