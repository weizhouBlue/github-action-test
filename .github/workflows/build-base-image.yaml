name: Base Image Release Build

# image : ${IMAGE_REPO}/${IMAGE_NAME}:${commit id of yaml path}
# image yaml path on the repo: ${IMAGE_ROOT_PATH}/${IMAGE_NAME}
env:
  IMAGE_NAME: baseimage
  IMAGE_REPO: weizhoulan
  IMAGE_ROOT_PATH: images
#  IMAGE_REPO: ${{ github.repository_owner }}


# when PR commit the change for baseimage dockerfile, trigger the workflow
on:
  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - ${{ env.IMAGE_ROOT_PATH }}/${{ env.IMAGE_NAME }}/**

permissions: read-all



concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build-and-push:
    timeout-minutes: 30
    environment: release-base-images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - dockerfile: ./${{ env.IMAGE_ROOT_PATH }}/${{ env.IMAGE_NAME }}/Dockerfile
            context: ./${{ env.IMAGE_ROOT_PATH }}/${{ env.IMAGE_NAME }}
      fail-fast: false

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1.2.0

      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}

      # get the commit id of path ./images/baseimage , used for image tag
      - name: Generating image tag
        id: tag
        run: |
          echo ::set-output name=tag::"$(git ls-tree --full-tree HEAD -- ${{ matrix.context }} | awk '{ print $3 }')"

      #check whether we have upload the same tag image to online register
      - name: Checking if tag already exists
        id: tag-in-repositories
        shell: bash
        run: |
          if docker buildx imagetools inspect ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:${{  steps.tag.outputs.tag }} &>/dev/null; then
            echo ::set-output name=exists::"true"
          else
            echo ::set-output name=exists::"false"
          fi

      - name: Login to online register
        if: ${{ steps.tag-in-repositories.outputs.exists == 'false' }}
        uses: docker/login-action@6af3c118c8376c675363897acf1757f7a9be6583
        with:
          registry: quay.io
          username: ${{ secrets.ONLINE_IMAGE_REGISTER_USERNAME }}
          password: ${{ secrets.ONLINE_IMAGE_REGISTER_PASSWORD }}

      - name: Release build ${{ env.IMAGE_NAME }}
        if: ${{ steps.tag-in-repositories.outputs.exists == 'false' }}
        uses: docker/build-push-action@v2.9.0
        id: docker_build_release
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:${{  steps.tag.outputs.tag }}

      - name: Image Release Digest
        if: ${{ steps.tag-in-repositories.outputs.exists == 'false' }}
        shell: bash
        run: |
          mkdir -p image-digest/
          echo "## ${{ env.IMAGE_NAME }}" > image-digest/${{ env.IMAGE_NAME }}.txt
          echo "" >> image-digest/${{ env.IMAGE_NAME }}.txt
          echo "\`${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:${{  steps.tag.outputs.tag }}@${{ steps.docker_build_release.outputs.digest }}\`" >> image-digest/${{ env.IMAGE_NAME }}.txt
          echo "" >> image-digest/${{ env.IMAGE_NAME }}.txt

      - name: Upload artifact digests
        if: ${{ steps.tag-in-repositories.outputs.exists == 'false' }}
        uses: actions/upload-artifact@v3.0.0
        with:
          name: image-digest ${{ env.IMAGE_NAME }}
          path: image-digest
          retention-days: 1

  image-digests:
    name: Display Digests
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Downloading Image Digests
        shell: bash
        run: |
          mkdir -p image-digest/

      - name: Download digests of all images built
        uses: actions/download-artifact@v3.0.0
        with:
          path: image-digest/

      - name: Image Digests Output
        shell: bash
        run: |
          cd image-digest/
          find -type f | sort | xargs -d '\n' cat
